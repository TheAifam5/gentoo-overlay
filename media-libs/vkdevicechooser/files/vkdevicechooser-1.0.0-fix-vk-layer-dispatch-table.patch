diff --git a/layer.cpp b/layer.cpp
index 3863862..34ad659 100644
--- a/layer.cpp
+++ b/layer.cpp
@@ -1,6 +1,5 @@
-#include "vulkan/vulkan.h"
 #include "vulkan/vk_layer.h"
-#include "vulkan/vk_layer_dispatch_table.h"
+#include "vulkan/utility/vk_dispatch_table.h"
 
 #include <cstdio>
 #include <cstdlib>
@@ -11,8 +10,8 @@
 #undef VK_LAYER_EXPORT
 #define VK_LAYER_EXPORT extern "C"
 
-static std::map<void*, VkLayerInstanceDispatchTable> gInstanceDispatch;
-static std::map<void*, VkLayerDispatchTable> gDeviceDispatch;
+static std::map<void*, VkuInstanceDispatchTable> gInstanceDispatch;
+static std::map<void*, VkuDeviceDispatchTable> gDeviceDispatch;
 
 static constexpr char kEnvVariable[] = "VULKAN_DEVICE_INDEX";
 
@@ -23,19 +22,19 @@ inline void* GetKey(DispatchableType object)
 }
 
 template <typename DispatchableType>
-inline VkLayerInstanceDispatchTable& GetInstanceDispatch(DispatchableType object)
+inline VkuInstanceDispatchTable& GetInstanceDispatch(DispatchableType object)
 {
     return gInstanceDispatch[GetKey(object)];
 }
 
 template <typename DispatchableType>
-inline VkLayerDispatchTable& GetDeviceDispatch(DispatchableType object)
+inline VkuDeviceDispatchTable& GetDeviceDispatch(DispatchableType object)
 {
     return gDeviceDispatch[GetKey(object)];
 }
 
 static VkResult ChooseDevice(VkInstance                          instance,
-                             const VkLayerInstanceDispatchTable& dispatch,
+                             const VkuInstanceDispatchTable& dispatch,
                              const char* const                   env,
                              VkPhysicalDevice&                   outDevice)
 {
@@ -65,7 +64,7 @@ static VkResult ChooseDevice(VkInstance                          instance,
 
     int deviceIndex = atoi(env);
 
-    if (deviceIndex >= count)
+    if (deviceIndex >= 0 && (uint32_t)deviceIndex >= count)
     {
         fprintf(stderr, "Device index %d does not exist, returning device 0\n", deviceIndex);
         deviceIndex = 0;
@@ -84,7 +83,7 @@ DeviceChooserLayer_EnumeratePhysicalDevices(VkInstance        instance,
                                             uint32_t*         pPhysicalDeviceCount,
                                             VkPhysicalDevice* pPhysicalDevices)
 {
-    const VkLayerInstanceDispatchTable& dispatch = GetInstanceDispatch(instance);
+    const VkuInstanceDispatchTable& dispatch = GetInstanceDispatch(instance);
 
     const char* const env = getenv(kEnvVariable);
     if (!env)
@@ -121,7 +120,7 @@ DeviceChooserLayer_EnumeratePhysicalDeviceGroupsKHR(VkInstance
                                                     uint32_t*                           pPhysicalDeviceGroupCount,
                                                     VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroups)
 {
-    const VkLayerInstanceDispatchTable& dispatch = GetInstanceDispatch(instance);
+    const VkuInstanceDispatchTable& dispatch = GetInstanceDispatch(instance);
 
     const char* const env = getenv(kEnvVariable);
     if (!env)
@@ -198,7 +197,7 @@ DeviceChooserLayer_CreateInstance(const VkInstanceCreateInfo*  pCreateInfo,
     #define GET(func) \
         dispatchTable.func = (PFN_vk##func)gpa(*pInstance, "vk" #func);
 
-    VkLayerInstanceDispatchTable dispatchTable;
+    VkuInstanceDispatchTable dispatchTable;
     dispatchTable.GetInstanceProcAddr = gpa;
     GET(EnumerateDeviceExtensionProperties);
     GET(DestroyInstance);
@@ -259,7 +258,7 @@ DeviceChooserLayer_CreateDevice(VkPhysicalDevice             physicalDevice,
     #define GET(func) \
         dispatchTable.func = (PFN_vk##func)gdpa(*pDevice, "vk" #func);
 
-    VkLayerDispatchTable dispatchTable;
+    VkuDeviceDispatchTable dispatchTable;
     dispatchTable.GetDeviceProcAddr = gdpa;
     GET(DestroyDevice);
 
diff --git a/meson.build b/meson.build
index 40e8f05..26e5ac1 100644
--- a/meson.build
+++ b/meson.build
@@ -13,8 +13,8 @@ endif
 if not cpp.has_header('vulkan/vk_layer.h')
     error('Vulkan development files not present (vulkan/vk_layer.h)')
 endif
-if not cpp.has_header('vulkan/vk_layer_dispatch_table.h')
-    error('Vulkan development files not present (vulkan/vk_layer_dispatch_table.h)')
+if not cpp.has_header('vulkan/utility/vk_dispatch_table.h')
+    error('Vulkan development files not present (vulkan/utility/vk_dispatch_table.h)')
 endif
 
 libdir = get_option('libdir')
